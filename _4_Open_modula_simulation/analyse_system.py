#!/usr/bin/env python3

"""
Guide de configuration du traitement parall√®le pour simulations TEASER
Explications d√©taill√©es et configurations recommand√©es
"""

import multiprocessing as mp
import psutil
import time
from pathlib import Path

def analyze_system_capabilities():
    """Analyse les capacit√©s de votre syst√®me"""
    print("=" * 60)
    print("ANALYSE DE VOTRE SYST√àME")
    print("=" * 60)
    
    # CPU
    cpu_count = mp.cpu_count()
    cpu_freq = psutil.cpu_freq()
    print(f"üíª Processeur:")
    print(f"   - Nombre de c≈ìurs: {cpu_count}")
    if cpu_freq:
        print(f"   - Fr√©quence: {cpu_freq.current:.0f} MHz")
    
    # RAM
    memory = psutil.virtual_memory()
    print(f"üß† M√©moire:")
    print(f"   - RAM totale: {memory.total / 1e9:.1f} GB")
    print(f"   - RAM disponible: {memory.available / 1e9:.1f} GB")
    print(f"   - RAM utilis√©e: {memory.percent:.1f}%")
    
    # Disque
    disk = psutil.disk_usage('/')
    print(f"üíæ Disque:")
    print(f"   - Espace total: {disk.total / 1e9:.1f} GB")
    print(f"   - Espace libre: {disk.free / 1e9:.1f} GB")

def recommend_worker_configuration(cpu_count: int, ram_gb: float, simulation_count: int):
    """Recommande la configuration optimale de workers"""
    print("\n" + "=" * 60)
    print("RECOMMANDATIONS DE CONFIGURATION")
    print("=" * 60)
    
    # Estimation m√©moire par worker (OpenModelica + mod√®le)
    memory_per_worker_gb = 2.0  # Estimation conservatrice
    
    # Workers bas√©s sur CPU (laisser 1 c≈ìur pour l'OS)
    cpu_based_workers = max(1, cpu_count - 1)
    
    # Workers bas√©s sur RAM (garder 2GB pour l'OS)
    ram_based_workers = max(1, int((ram_gb - 2) / memory_per_worker_gb))
    
    # Workers bas√©s sur la charge de travail
    if simulation_count < 10:
        workload_workers = min(simulation_count, 2)
    elif simulation_count < 100:
        workload_workers = min(simulation_count, 4)
    else:
        workload_workers = 8  # Max recommand√© pour stabilit√©
    
    # Recommandation finale (le minimum des contraintes)
    recommended_workers = min(cpu_based_workers, ram_based_workers, workload_workers)
    
    print(f"üìä Analyse des contraintes:")
    print(f"   - Contrainte CPU: {cpu_based_workers} workers (CPUs: {cpu_count})")
    print(f"   - Contrainte RAM: {ram_based_workers} workers (RAM: {ram_gb:.1f}GB)")
    print(f"   - Contrainte charge: {workload_workers} workers ({simulation_count} simulations)")
    
    print(f"\nüéØ RECOMMANDATION FINALE: {recommended_workers} workers")
    
    # Estimation des performances
    estimated_time_sequential = simulation_count * 95  # 95s par simulation
    estimated_time_parallel = estimated_time_sequential / recommended_workers
    
    print(f"\n‚è±Ô∏è  Estimation des temps:")
    print(f"   - S√©quentiel: {estimated_time_sequential/3600:.1f} heures")
    print(f"   - Parall√®le ({recommended_workers} workers): {estimated_time_parallel/3600:.1f} heures")
    print(f"   - Acc√©l√©ration: {recommended_workers:.1f}x")
    
    return recommended_workers

def create_test_configurations():
    """Cr√©e diff√©rentes configurations de test"""
    print("\n" + "=" * 60)
    print("CONFIGURATIONS DE TEST SUGG√âR√âES")
    print("=" * 60)
    
    configs = [
        {
            "name": "Test basique",
            "workers": 1,
            "simulations": 5,
            "description": "Test de fonctionnement de base"
        },
        {
            "name": "Test parall√©lisme",
            "workers": 2,
            "simulations": 10,
            "description": "V√©rifier que le parall√©lisme fonctionne"
        },
        {
            "name": "Test performance",
            "workers": 4,
            "simulations": 50,
            "description": "Mesurer l'acc√©l√©ration r√©elle"
        },
        {
            "name": "Production",
            "workers": "auto",
            "simulations": "all",
            "description": "Configuration finale pour toutes les simulations"
        }
    ]
    
    for i, config in enumerate(configs, 1):
        print(f"\n{i}. {config['name']}:")
        print(f"   - Workers: {config['workers']}")
        print(f"   - Simulations: {config['simulations']}")
        print(f"   - But: {config['description']}")

def generate_configuration_code(workers: int, max_simulations: int = None):
    """G√©n√®re le code de configuration"""
    print("\n" + "=" * 60)
    print("CODE DE CONFIGURATION")
    print("=" * 60)
    
    print(f"""
# Configuration recommand√©e pour votre syst√®me
def main():
    PACKAGE_PATH = r"C:/Users/hp/TEASEROutput/Project/package.mo"
    AIXLIB_PATH = r"C:/AixLib-main/AixLib-main/AixLib/package.mo"
    OUTPUT_DIR = r"_4_Open_modula_simulation/simulation_results_optimized"
    
    # √âTAPE 1: TEST BASIQUE (recommand√© avant production)
    print("üß™ Test avec {workers} workers et {max_simulations or 'toutes les'} simulations...")
    
    results = run_optimized_simulations(
        PACKAGE_PATH, 
        AIXLIB_PATH, 
        OUTPUT_DIR,
        max_simulations={max_simulations or 'None'},  # None = toutes les simulations
        max_workers={workers}        # Nombre de workers recommand√©
    )
    
    # √âTAPE 2: Si le test fonctionne bien, augmentez progressivement
    # max_workers=2 ‚Üí 4 ‚Üí 6 ‚Üí 8 selon vos r√©sultats
""")

def monitor_system_during_simulation():
    """Guide pour surveiller le syst√®me pendant les simulations"""
    print("\n" + "=" * 60)
    print("SURVEILLANCE DU SYST√àME")
    print("=" * 60)
    
    print("""
üîç Pendant les simulations, surveillez:

1. UTILISATION CPU:
   - Ouvrez le Gestionnaire des t√¢ches (Ctrl+Shift+Esc)
   - Onglet "Performance" ‚Üí CPU
   - L'utilisation devrait √™tre √©lev√©e mais pas 100% constant

2. UTILISATION M√âMOIRE:
   - M√™me onglet ‚Üí M√©moire
   - Si >90%, r√©duisez le nombre de workers

3. UTILISATION DISQUE:
   - M√™me onglet ‚Üí Disque
   - Activit√© √©lev√©e normale pendant les simulations

4. PROCESSUS OPENMODELICA:
   - Onglet "Processus"
   - Cherchez "omc" ou "OpenModelica"
   - Vous devriez voir plusieurs processus actifs

‚ö†Ô∏è  SIGNAUX D'ALARME:
   - RAM >95% : ARR√äTEZ et r√©duisez les workers
   - CPU 100% pendant >10 min : Possible blocage
   - Pas d'activit√© disque : Possible probl√®me
   - Messages d'erreur r√©p√©t√©s : V√©rifiez les logs
""")

def troubleshooting_guide():
    """Guide de r√©solution des probl√®mes"""
    print("\n" + "=" * 60)
    print("R√âSOLUTION DE PROBL√àMES")
    print("=" * 60)
    
    problems = [
        {
            "problem": "Les simulations ne d√©marrent pas",
            "solutions": [
                "V√©rifiez les chemins PACKAGE_PATH et AIXLIB_PATH",
                "Testez d'abord avec 1 worker",
                "V√©rifiez les logs dans simulation_log.txt"
            ]
        },
        {
            "problem": "Erreurs 'Out of Memory'",
            "solutions": [
                "R√©duisez le nombre de workers",
                "Fermez les autres applications",
                "Augmentez la m√©moire virtuelle Windows"
            ]
        },
        {
            "problem": "Simulations tr√®s lentes",
            "solutions": [
                "V√©rifiez l'utilisation CPU/RAM",
                "R√©duisez le nombre de workers si surcharge",
                "Utilisez un SSD si possible"
            ]
        },
        {
            "problem": "Blocages fr√©quents",
            "solutions": [
                "R√©duisez √† 2 workers maximum",
                "Augmentez la tol√©rance (1e-3)",
                "V√©rifiez la stabilit√© avec 1 worker d'abord"
            ]
        }
    ]
    
    for i, item in enumerate(problems, 1):
        print(f"\n{i}. PROBL√àME: {item['problem']}")
        print("   SOLUTIONS:")
        for solution in item['solutions']:
            print(f"   - {solution}")

def main():
    """Fonction principale d'analyse et recommandations"""
    
    print("üîß CONFIGURATION OPTIMALE POUR VOS SIMULATIONS TEASER")
    print("=" * 80)
    
    # Analyser le syst√®me
    analyze_system_capabilities()
    
    # Obtenir les informations syst√®me
    cpu_count = mp.cpu_count()
    memory_gb = psutil.virtual_memory().total / 1e9
    simulation_count = 1000  # Vos 1000 b√¢timents
    
    # Recommandations
    recommended_workers = recommend_worker_configuration(cpu_count, memory_gb, simulation_count)
    
    # Configurations de test
    create_test_configurations()
    
    # Code de configuration
    generate_configuration_code(recommended_workers, 10)  # Test avec 10 simulations
    
    # Surveillance
    monitor_system_during_simulation()
    
    # R√©solution de probl√®mes
    troubleshooting_guide()
    
    print("\n" + "=" * 80)
    print("üéØ PLAN D'ACTION RECOMMAND√â:")
    print("=" * 80)
    print(f"""
1. COMMENCEZ PAR UN TEST:
   - 1 worker, 5 simulations
   - V√©rifiez que tout fonctionne

2. TESTEZ LE PARALL√âLISME:
   - 2 workers, 10 simulations
   - Mesurez l'acc√©l√©ration

3. OPTIMISEZ PROGRESSIVEMENT:
   - Augmentez jusqu'√† {recommended_workers} workers
   - Testez avec 50-100 simulations

4. PRODUCTION:
   - Configuration finale valid√©e
   - Lancez vos 1000 simulations

5. SURVEILLEZ:
   - Gestionnaire des t√¢ches ouvert
   - Logs de simulation
   - Arr√™tez si probl√®mes
""")

if __name__ == "__main__":
    main()
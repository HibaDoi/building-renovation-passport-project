#!/usr/bin/env python3
"""
Script de simulation automatique TEASER avec TOUTES les corrections
"""

import os
import sys
import time
import logging
from pathlib import Path
from typing import List, Dict, Tuple
import re

try:
    from OMPython import OMCSessionZMQ
except ImportError:
    print("Erreur: OMPython n'est pas install√©.")
    sys.exit(1)

class TeaserSimulatorFixed:
    """Simulateur TEASER avec toutes les corrections"""
    
    def __init__(self, package_path: str, aixlib_path: str, output_dir: str = None):
        self.package_path = Path(package_path)
        self.aixlib_path = Path(aixlib_path)
        self.output_dir = Path(output_dir) if output_dir else self.package_path.parent / "simulation_results"
        
        # Param√®tres de simulation
        self.stop_time = 3.154e7  # 1 an
        self.tolerance = 1e-6
        self.solver = "dassl"
        
        self._setup_logging()
        self.omc = None
        self.package_name = None
        
    def _setup_logging(self):
        """Configure le logging"""
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        self.logger = logging.getLogger('TeaserSimulatorFixed')
        self.logger.setLevel(logging.INFO)
        
        # Supprimer les anciens handlers
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)
        
        # Handler fichier
        file_handler = logging.FileHandler(self.output_dir / 'simulation_log.txt', mode='w', encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        
        # Handler console
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
    
    def connect_omc(self) -> bool:
        """Connexion √† OpenModelica"""
        try:
            self.logger.info("Connexion √† OpenModelica...")
            self.omc = OMCSessionZMQ()
            
            version = self.omc.sendExpression("getVersion()")
            self.logger.info(f"OpenModelica version: {version}")
            
            return True
        except Exception as e:
            self.logger.error(f"Erreur de connexion: {e}")
            return False
    
    def install_missing_packages(self) -> bool:
        """Installe les packages manquants"""
        try:
            self.logger.info("üîß Installation des packages manquants...")
            
            # Installation SDF
            self.logger.info("üì¶ Installation SDF...")
            result_sdf = self.omc.sendExpression('installPackage(SDF, "0.4.2", exactMatch=false)')
            if result_sdf:
                self.logger.info("‚úÖ SDF install√©")
            else:
                self.logger.warning("‚ö†Ô∏è √âchec installation SDF")
            
            # Installation Modelica_DeviceDrivers
            self.logger.info("üì¶ Installation Modelica_DeviceDrivers...")
            result_mdd = self.omc.sendExpression('installPackage(Modelica_DeviceDrivers, "2.1.1", exactMatch=false)')
            if result_mdd:
                self.logger.info("‚úÖ Modelica_DeviceDrivers install√©")
            else:
                self.logger.warning("‚ö†Ô∏è √âchec installation Modelica_DeviceDrivers")
            
            return True
        except Exception as e:
            self.logger.error(f"Erreur installation packages: {e}")
            return False
    
    def load_libraries(self) -> bool:
        """Charge toutes les biblioth√®ques avec corrections de versions"""
        try:
            self.logger.info("üìö Chargement des biblioth√®ques avec versions compatibles...")
            
            # 1. Chargement Modelica 4.0.0 sp√©cifiquement (compatible avec AixLib)
            self.logger.info("Chargement Modelica 4.0.0...")
            modelica_result = self.omc.sendExpression('loadModel(Modelica, {"4.0.0"})')
            if not modelica_result:
                self.logger.warning("√âchec Modelica 4.0.0, tentative version par d√©faut...")
                self.omc.sendExpression('loadModel(Modelica)')
            else:
                self.logger.info("‚úÖ Modelica 4.0.0 charg√©")
            
            # 2. Chargement AixLib
            self.logger.info(f"Chargement AixLib: {self.aixlib_path}")
            result_aixlib = self.omc.sendExpression(f'loadFile("{self.aixlib_path}")')
            if not result_aixlib:
                self.logger.error("√âchec chargement AixLib")
                return False
            
            # 3. Chargement package TEASER
            self.logger.info(f"Chargement package TEASER: {self.package_path}")
            result_teaser = self.omc.sendExpression(f'loadFile("{self.package_path}")')
            if not result_teaser:
                self.logger.error("√âchec chargement package TEASER")
                return False
            
            # 4. CORRECTION CRUCIALE: Conversion AixLib
            self.logger.info("üîÑ Application conversion AixLib...")
            conversion_result = self.omc.sendExpression('convertPackageToLibrary(Project, AixLib, "2.1.2")')
            if conversion_result:
                self.logger.info("‚úÖ Conversion AixLib appliqu√©e")
            else:
                self.logger.warning("‚ö†Ô∏è Probl√®me conversion AixLib - on continue quand m√™me")
            
            # 5. Nettoyage des erreurs de compatibilit√©
            self.logger.info("üßπ Nettoyage des messages d'avertissement...")
            self.omc.sendExpression("clearMessages()")
            
            # 6. Obtenir nom du package
            self.package_name = self._get_package_name()
            if not self.package_name:
                self.logger.error("Impossible de d√©terminer le nom du package")
                return False
            
            # 7. V√©rification finale
            classes = self.omc.sendExpression(f'getClassNames({self.package_name})')
            if not classes:
                self.logger.error(f"Package {self.package_name} vide")
                return False
            
            self.logger.info(f"‚úÖ Toutes les biblioth√®ques charg√©es - {len(classes)} classes")
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur chargement biblioth√®ques: {e}")
            return False
    
    def _get_package_name(self) -> str:
        """Obtient le nom du package"""
        try:
            with open(self.package_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            match = re.search(r'package\s+(\w+)', content)
            if match:
                return match.group(1)
            
            return self.package_path.parent.name
            
        except Exception as e:
            self.logger.error(f"Erreur lecture package: {e}")
            return None
    
    def get_building_models(self) -> List[str]:
        """R√©cup√®re les mod√®les de b√¢timents"""
        try:
            self.logger.info("üîç Recherche des mod√®les de b√¢timents...")
            
            classes = self.omc.sendExpression(f'getClassNames({self.package_name})')
            
            buildings = []
            if classes:
                for cls in classes:
                    class_name = str(cls).strip('"')
                    if class_name.startswith('NL_Building_'):
                        buildings.append(f"{self.package_name}.{class_name}")
            
            self.logger.info(f"Trouv√© {len(buildings)} mod√®les de b√¢timents")
            return buildings
            
        except Exception as e:
            self.logger.error(f"Erreur recherche mod√®les: {e}")
            return []
    
    def simulate_building(self, model_name: str) -> Tuple[bool, str]:
        """Simule un b√¢timent avec gestion d'erreurs am√©lior√©e"""
        try:
            building_id = model_name.split('.')[-1]
            output_file = self.output_dir / f"{building_id}_result.mat"
            
            self.logger.info(f"üöÄ Simulation {building_id}...")
            
            # Nettoyage des messages d'erreur pr√©c√©dents
            self.omc.sendExpression("clearMessages()")
            
            # V√©rification pr√©alable du mod√®le
            check_result = self.omc.sendExpression(f'checkModel({model_name})')
            if "Error" in str(check_result):
                return False, f"Erreur dans checkModel: {check_result[:200]}"
            
            # Simulation avec gestion d'erreurs am√©lior√©e
            sim_command = f'''simulate({model_name}, 
                                    stopTime={self.stop_time}, 
                                    tolerance={self.tolerance}, 
                                    method="{self.solver}",
                                    outputFormat="mat",
                                    fileNamePrefix="{building_id}_result")'''
            
            start_time = time.time()
            result = self.omc.sendExpression(sim_command)
            end_time = time.time()
            
            # R√©cup√©ration des messages apr√®s simulation
            messages = self.omc.sendExpression("getErrorString()")
            
            # V√©rification r√©sultat - recherche de succ√®s m√™me avec avertissements
            if result and ('SimulationResult' in str(result) or 'resultFile' in str(result)):
                # V√©rification du fichier de r√©sultat
                source_file = Path(f"{building_id}_result.mat")
                if source_file.exists():
                    source_file.rename(output_file)
                    duration = end_time - start_time
                    return True, f"Succ√®s en {duration:.1f}s - {output_file}"
                else:
                    return False, f"Fichier r√©sultat non g√©n√©r√© - {messages[:200] if messages else 'Aucun message'}"
            else:
                # V√©rification si c'est juste des avertissements de compatibilit√©
                if messages and "fully compatible" in messages and "Error" not in messages:
                    # Peut-√™tre que √ßa a fonctionn√© malgr√© les avertissements
                    source_file = Path(f"{building_id}_result.mat")
                    if source_file.exists():
                        source_file.rename(output_file)
                        duration = end_time - start_time
                        return True, f"Succ√®s avec avertissements en {duration:.1f}s"
                
                return False, f"√âchec - {messages[:300] if messages else 'Pas de message d erreur'}"
            
        except Exception as e:
            return False, f"Exception: {str(e)}"
    
    def run_all_simulations(self) -> Dict[str, bool]:
        """Lance toutes les simulations avec corrections"""
        
        # √âtape 1: Connexion
        if not self.connect_omc():
            return {}
        
        # √âtape 2: Installation packages manquants
        self.install_missing_packages()
        
        # √âtape 3: Chargement biblioth√®ques
        if not self.load_libraries():
            return {}
        
        # √âtape 4: R√©cup√©ration des mod√®les
        buildings = self.get_building_models()
        if not buildings:
            self.logger.error("Aucun mod√®le trouv√©")
            return {}
        
        # √âtape 5: Simulations
        results = {}
        successful = 0
        failed = 0
        
        self.logger.info(f"üöÄ D√©but simulations de {len(buildings)} b√¢timents")
        
        for i, building in enumerate(buildings, 1):
            building_id = building.split('.')[-1]
            self.logger.info(f"[{i}/{len(buildings)}] {building_id}")
            
            success, message = self.simulate_building(building)
            results[building_id] = success
            
            if success:
                successful += 1
                self.logger.info(f"‚úÖ {message}")
            else:
                failed += 1
                self.logger.error(f"‚ùå {message}")
        
        # R√©sum√©
        self.logger.info("=" * 60)
        self.logger.info(f"R√âSUM√â: {successful} succ√®s, {failed} √©checs")
        self.logger.info(f"Taux de succ√®s: {successful/len(buildings)*100:.1f}%")
        
        return results
    
    def cleanup(self):
        """Nettoyage"""
        if self.omc:
            try:
                self.omc.sendExpression("quit()")
            except:
                pass

def main():
    """Fonction principale"""
    
    # Configuration
    PACKAGE_PATH = r"C:/Users/hp/TEASEROutput/Project/package.mo"
    AIXLIB_PATH = r"C:/AixLib-main/AixLib-main/AixLib/package.mo"
    OUTPUT_DIR = r"Open_modula_maybe/simulation_results"
    
    # V√©rifications
    if not Path(PACKAGE_PATH).exists():
        print(f"‚ùå Fichier package introuvable: {PACKAGE_PATH}")
        return
    
    if not Path(AIXLIB_PATH).exists():
        print(f"‚ùå Fichier AixLib introuvable: {AIXLIB_PATH}")
        return
    
    # Simulation
    simulator = TeaserSimulatorFixed(
        package_path=PACKAGE_PATH,
        aixlib_path=AIXLIB_PATH,
        output_dir=OUTPUT_DIR
    )
    
    try:
        print("üöÄ D√©marrage simulation TEASER avec toutes les corrections...")
        results = simulator.run_all_simulations()
        
        if results:
            print("\nüìä R√âSULTATS D√âTAILL√âS:")
            for building, success in results.items():
                status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
                print(f"{building}: {status}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Simulation interrompue")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        simulator.cleanup()

if __name__ == "__main__":
    main()